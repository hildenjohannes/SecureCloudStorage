var _user$project$State$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: A2(_elm_lang$websocket$WebSocket$listen, 'ws://localhost:5000/ws', _user$project$Types$Message),
			_1: {
				ctor: '::',
				_0: _user$project$Ports$encrypted(_user$project$Types$Encrypted),
				_1: {
					ctor: '::',
					_0: _user$project$Ports$decrypted(_user$project$Types$Decrypted),
					_1: {
						ctor: '::',
						_0: _user$project$Ports$fileRead(_user$project$Types$FileRead),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$State$result = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Ok') {
		return _p0._0;
	} else {
		return {
			ctor: '::',
			_0: _p0._0,
			_1: {ctor: '[]'}
		};
	}
};
var _user$project$State$stringsDecoder = _elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string);
var _user$project$State$parseJsonFiles = function (jsonString) {
	return _user$project$State$result(
		A2(_elm_lang$core$Json_Decode$decodeString, _user$project$State$stringsDecoder, jsonString));
};
var _user$project$State$extract = function (x) {
	var _p1 = x;
	if (_p1.ctor === 'Just') {
		return _p1._0;
	} else {
		return 'Nothing';
	}
};
var _user$project$State$init = {
	ctor: '_Tuple2',
	_0: {
		view: _user$project$Types$LoginView,
		inputId: 'FileInputId',
		filename: '',
		content: '',
		encrypted: '',
		decrypted: '',
		email: '',
		password: '',
		firstname: '',
		lastname: '',
		showFeedback: false,
		files: {ctor: '[]'},
		chosenFile: '',
		rowActive: 'info',
		rowInactive: ''
	},
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$State$websocketMessage = F3(
	function (model, method, params) {
		var _p2 = _user$project$State$extract(method);
		switch (_p2) {
			case 'login':
				var _p3 = _user$project$State$extract(
					_elm_lang$core$List$head(params));
				if (_p3 === 'True') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{showFeedback: false, view: _user$project$Types$TeamView}),
						{
							ctor: '::',
							_0: A2(_elm_lang$websocket$WebSocket$send, 'ws://localhost:5000/ws', 'listFiles|'),
							_1: {ctor: '[]'}
						});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{showFeedback: true}),
						{
							ctor: '::',
							_0: _elm_lang$core$Platform_Cmd$none,
							_1: {ctor: '[]'}
						});
				}
			case 'listFiles':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							files: _user$project$State$parseJsonFiles(
								_user$project$State$extract(
									_elm_lang$core$List$head(params))),
							view: _user$project$Types$TeamView
						}),
					{
						ctor: '::',
						_0: _elm_lang$core$Platform_Cmd$none,
						_1: {ctor: '[]'}
					});
			case 'register':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{view: _user$project$Types$TeamView}),
					{
						ctor: '::',
						_0: _elm_lang$core$Platform_Cmd$none,
						_1: {ctor: '[]'}
					});
			case 'download':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: _user$project$Ports$download(params),
						_1: {ctor: '[]'}
					});
			case 'logout':
				return _user$project$State$init;
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: _elm_lang$core$Platform_Cmd$none,
						_1: {ctor: '[]'}
					});
		}
	});
var _user$project$State$update = F2(
	function (msg, model) {
		var _p4 = msg;
		switch (_p4.ctor) {
			case 'Logout':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{view: _user$project$Types$LoginView}),
					{
						ctor: '::',
						_0: A2(_elm_lang$websocket$WebSocket$send, 'ws://localhost:5000/ws', 'logout|'),
						_1: {ctor: '[]'}
					});
			case 'ShowTeam':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{view: _user$project$Types$TeamView}),
					{ctor: '[]'});
			case 'ShowRegister':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{view: _user$project$Types$RegisterView}),
					{ctor: '[]'});
			case 'FileSelected':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: _user$project$Ports$fileSelected(model.inputId),
						_1: {ctor: '[]'}
					});
			case 'Upload':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: A2(
							_elm_lang$websocket$WebSocket$send,
							'ws://localhost:5000/ws',
							A2(
								_elm_lang$core$Basics_ops['++'],
								'upload|',
								A2(
									_elm_lang$core$Basics_ops['++'],
									model.filename,
									A2(_elm_lang$core$Basics_ops['++'], '|', model.encrypted)))),
						_1: {ctor: '[]'}
					});
			case 'FileRead':
				var _p5 = _p4._0;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{filename: _p5.filename, content: _p5.content}),
					{
						ctor: '::',
						_0: _user$project$Ports$encrypt(_p5.content),
						_1: {ctor: '[]'}
					});
			case 'Download':
				var _p6 = model.chosenFile;
				if (_p6 === '') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$websocket$WebSocket$send,
								'ws://localhost:5000/ws',
								A2(_elm_lang$core$Basics_ops['++'], 'download|', model.chosenFile)),
							_1: {ctor: '[]'}
						});
				}
			case 'Encrypted':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{encrypted: _p4._0}),
					{ctor: '[]'});
			case 'Decrypted':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{decrypted: _p4._0}),
					{ctor: '[]'});
			case 'Email':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{email: _p4._0, showFeedback: false}),
					{ctor: '[]'});
			case 'Password':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{password: _p4._0, showFeedback: false}),
					{ctor: '[]'});
			case 'Login':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{showFeedback: true}),
					{
						ctor: '::',
						_0: A2(
							_elm_lang$websocket$WebSocket$send,
							'ws://localhost:5000/ws',
							A2(
								_elm_lang$core$Basics_ops['++'],
								'login|',
								A2(
									_elm_lang$core$Basics_ops['++'],
									model.email,
									A2(_elm_lang$core$Basics_ops['++'], '|', model.password)))),
						_1: {ctor: '[]'}
					});
			case 'FirstName':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{firstname: _p4._0}),
					{ctor: '[]'});
			case 'LastName':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{lastname: _p4._0}),
					{ctor: '[]'});
			case 'Register':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(
						_elm_lang$websocket$WebSocket$send,
						'ws://localhost:5000/ws',
						A2(
							_elm_lang$core$Basics_ops['++'],
							'register|',
							A2(
								_elm_lang$core$Basics_ops['++'],
								model.firstname,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'|',
									A2(
										_elm_lang$core$Basics_ops['++'],
										model.lastname,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'|',
											A2(
												_elm_lang$core$Basics_ops['++'],
												model.email,
												A2(_elm_lang$core$Basics_ops['++'], '|', model.password))))))))
				};
			case 'Message':
				var temp = A2(_elm_lang$core$String$split, '|', _p4._0);
				var params = A2(_elm_lang$core$List$drop, 1, temp);
				var method = _elm_lang$core$List$head(temp);
				return A3(_user$project$State$websocketMessage, model, method, params);
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{chosenFile: _p4._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
